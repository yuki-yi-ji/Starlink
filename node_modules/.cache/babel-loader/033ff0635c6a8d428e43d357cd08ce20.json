{"ast":null,"code":"var _jsxFileName = \"/Users/yourfather/Desktop/laiproject/starlink/src/components/Main.js\";\nimport React, { Component } from 'react';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\nimport Axios from 'axios';\nimport WorldMap from './WorldMap';\nimport * as d3Scale from 'd3-scale';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport { select as d3Select } from 'd3-selection';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nconst width = 960;\nconst height = 600;\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.trackOnClick = duration => {\n      const {\n        observerLat,\n        observerLong,\n        observerAlt\n      } = this.state.setting;\n      const endTime = duration * 60;\n      this.setState({\n        loadingSatPositions: true,\n        duration: duration\n      });\n      const urls = this.state.selected.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return Axios.get(url);\n      });\n      Axios.all(urls).then(Axios.spread((...args) => {\n        return args.map(item => item.data);\n      })).then(res => {\n        this.setState({\n          satPositions: res,\n          loadingSatPositions: false\n        });\n        this.track();\n      }).catch(e => {\n        console.log('err in fetch satellite position -> ', e.message);\n      });\n    };\n\n    this.addOrRemove = (item, status) => {\n      let {\n        selected: list\n      } = this.state; // let list = this.state.selected;\n\n      const found = list.some(entry => entry.satid === item.satid);\n\n      if (status && !found) {\n        list.push(item);\n      }\n\n      if (!status && found) {\n        list = list.filter(entry => {\n          return entry.satid !== item.satid;\n        });\n      }\n\n      console.log(list);\n      this.setState({\n        selected: list\n      });\n    };\n\n    this.showNearbySatellite = setting => {\n      this.setState({\n        setting: setting\n      });\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      const {\n        observerLat,\n        observerLong,\n        observerAlt,\n        radius\n      } = setting;\n      const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${radius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        loadingSatellites: true\n      });\n      Axios.get(url).then(response => {\n        this.setState({\n          satInfo: response.data,\n          loadingSatellites: false,\n          selected: []\n        });\n      }).catch(error => {\n        console.log('err in fetch satellite -> ', error);\n        this.setState({\n          loadingSatellites: false\n        });\n      });\n    };\n\n    this.track = () => {\n      const data = this.state.satPositions;\n      const len = data[0].positions.length;\n      const startTime = this.state.duration;\n      const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n      const context2 = canvas2.node().getContext(\"2d\");\n      let now = new Date();\n      let i = startTime;\n      let timer = setInterval(() => {\n        let timePassed = Date.now() - now;\n\n        if (i === startTime) {\n          now.setSeconds(now.getSeconds() + startTime * 60);\n        }\n\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName('hint')[0];\n          oHint.innerHTML = '';\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i], context2);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos, context2) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join('');\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = d3Scale.scaleOrdinal(schemeCategory10)(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.state = {\n      loadingSatellites: false,\n      loadingSatPositions: false,\n      setting: undefined,\n      selected: []\n    };\n    this.refTrack = React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SatSetting, {\n      onShow: this.showNearbySatellite,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(SatelliteList, {\n      satInfo: this.state.satInfo,\n      loading: this.state.loadingSatellites,\n      onSelectionChange: this.addOrRemove,\n      disableTrack: this.state.selected.length === 0,\n      trackOnclick: this.trackOnClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(WorldMap, {\n      refTrack: this.refTrack,\n      loading: this.state.loadingSatPositions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/yourfather/Desktop/laiproject/starlink/src/components/Main.js"],"names":["React","Component","SatSetting","SatelliteList","NEARBY_SATELLITE","STARLINK_CATEGORY","SAT_API_KEY","SATELLITE_POSITION_URL","Axios","WorldMap","d3Scale","schemeCategory10","timeFormat","d3TimeFormat","select","d3Select","geoKavrayskiy7","width","height","Main","constructor","trackOnClick","duration","observerLat","observerLong","observerAlt","state","setting","endTime","setState","loadingSatPositions","urls","selected","map","sat","satid","url","get","all","then","spread","args","item","data","res","satPositions","track","catch","e","console","log","message","addOrRemove","status","list","found","some","entry","push","filter","showNearbySatellite","fetchSatellite","radius","loadingSatellites","response","satInfo","error","len","positions","length","startTime","canvas2","refTrack","current","attr","context2","node","getContext","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","scale","translate","precision","xy","scaleOrdinal","beginPath","arc","Math","PI","fill","undefined","createRef","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,WAA9C,EAA2DC,sBAA3D,QAAyF,aAAzF;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,gBAAT,QAAkC,oBAAlC;AACA,SAASC,UAAU,IAAIC,YAAvB,QAA2C,gBAA3C;AACA,SAASC,MAAM,IAAIC,QAAnB,QAAmC,cAAnC;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AAEA,MAAMC,IAAN,SAAmBlB,SAAnB,CAA6B;AACzBmB,EAAAA,WAAW,GAAE;AACX;;AADW,SAWbC,YAXa,GAWGC,QAAD,IAAc;AAC3B,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,YAAf;AAA6BC,QAAAA;AAA7B,UAA6C,KAAKC,KAAL,CAAWC,OAA9D;AACA,YAAMC,OAAO,GAAGN,QAAQ,GAAG,EAA3B;AACA,WAAKO,QAAL,CAAc;AACZC,QAAAA,mBAAmB,EAAE,IADT;AAEZR,QAAAA,QAAQ,EAAEA;AAFE,OAAd;AAIA,YAAMS,IAAI,GAAG,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,GAApB,CAAyBC,GAAG,IAAI;AACzC,cAAM;AAAEC,UAAAA;AAAF,YAAYD,GAAlB;AACA,cAAME,GAAG,GAAI,GAAE7B,sBAAuB,IAAG4B,KAAM,IAAGZ,WAAY,IAAGC,YAAa,IAAGC,WAAY,IAAGG,OAAQ,YAAWtB,WAAY,EAA/H;AACA,eAAOE,KAAK,CAAC6B,GAAN,CAAUD,GAAV,CAAP;AACH,OAJY,CAAb;AAMA5B,MAAAA,KAAK,CAAC8B,GAAN,CAAUP,IAAV,EACGQ,IADH,CAEI/B,KAAK,CAACgC,MAAN,CAAa,CAAC,GAAGC,IAAJ,KAAa;AACtB,eAAOA,IAAI,CAACR,GAAL,CAASS,IAAI,IAAIA,IAAI,CAACC,IAAtB,CAAP;AACH,OAFD,CAFJ,EAMGJ,IANH,CAMSK,GAAG,IAAI;AACV,aAAKf,QAAL,CAAc;AACVgB,UAAAA,YAAY,EAAED,GADJ;AAEVd,UAAAA,mBAAmB,EAAE;AAFX,SAAd;AAIA,aAAKgB,KAAL;AACH,OAZH,EAaGC,KAbH,CAaUC,CAAC,IAAI;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDF,CAAC,CAACG,OAArD;AACH,OAfH;AAiBD,KAzCY;;AAAA,SA2CbC,WA3Ca,GA2CC,CAACV,IAAD,EAAOW,MAAP,KAAkB;AAC9B,UAAI;AAAErB,QAAAA,QAAQ,EAAEsB;AAAZ,UAAqB,KAAK5B,KAA9B,CAD8B,CAE9B;;AACA,YAAM6B,KAAK,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAAK,IAAIA,KAAK,CAACtB,KAAN,KAAgBO,IAAI,CAACP,KAAxC,CAAd;;AAEA,UAAGkB,MAAM,IAAI,CAACE,KAAd,EAAoB;AAChBD,QAAAA,IAAI,CAACI,IAAL,CAAUhB,IAAV;AACH;;AAED,UAAG,CAACW,MAAD,IAAWE,KAAd,EAAoB;AAChBD,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAaF,KAAK,IAAI;AACzB,iBAAOA,KAAK,CAACtB,KAAN,KAAgBO,IAAI,CAACP,KAA5B;AACH,SAFM,CAAP;AAGH;;AAEDc,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACA,WAAKzB,QAAL,CAAc;AACZG,QAAAA,QAAQ,EAAEsB;AADE,OAAd;AAGD,KA9DY;;AAAA,SAgEbM,mBAhEa,GAgEUjC,OAAD,IAAa;AACjC,WAAKE,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAEA;AADG,OAAd;AAGA,WAAKkC,cAAL,CAAoBlC,OAApB;AACD,KArEY;;AAAA,SAuEbkC,cAvEa,GAuEKlC,OAAD,IAAa;AAC5B,YAAM;AAACJ,QAAAA,WAAD;AAAcC,QAAAA,YAAd;AAA4BC,QAAAA,WAA5B;AAAyCqC,QAAAA;AAAzC,UAAmDnC,OAAzD;AACA,YAAMS,GAAG,GAAI,GAAEhC,gBAAiB,IAAGmB,WAAY,IAAGC,YAAa,IAAGC,WAAY,IAAGqC,MAAO,IAAGzD,iBAAkB,YAAWC,WAAY,EAApI;AAEA,WAAKuB,QAAL,CAAc;AACZkC,QAAAA,iBAAiB,EAAE;AADP,OAAd;AAGAvD,MAAAA,KAAK,CAAC6B,GAAN,CAAUD,GAAV,EACKG,IADL,CACUyB,QAAQ,IAAI;AACd,aAAKnC,QAAL,CAAc;AACVoC,UAAAA,OAAO,EAAED,QAAQ,CAACrB,IADR;AAEVoB,UAAAA,iBAAiB,EAAE,KAFT;AAGV/B,UAAAA,QAAQ,EAAE;AAHA,SAAd;AAKH,OAPL,EAQKe,KARL,CAQWmB,KAAK,IAAI;AACZjB,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CgB,KAA1C;AACA,aAAKrC,QAAL,CAAc;AACZkC,UAAAA,iBAAiB,EAAE;AADP,SAAd;AAGH,OAbL;AAcD,KA5FY;;AAAA,SA8FbjB,KA9Fa,GA8FL,MAAM;AACZ,YAAMH,IAAI,GAAG,KAAKjB,KAAL,CAAWmB,YAAxB;AAEA,YAAMsB,GAAG,GAAGxB,IAAI,CAAC,CAAD,CAAJ,CAAQyB,SAAR,CAAkBC,MAA9B;AACA,YAAMC,SAAS,GAAG,KAAK5C,KAAL,CAAWJ,QAA7B;AAEA,YAAMiD,OAAO,GAAGxD,QAAQ,CAAC,KAAKyD,QAAL,CAAcC,OAAf,CAAR,CACTC,IADS,CACJ,OADI,EACKzD,KADL,EAETyD,IAFS,CAEJ,QAFI,EAEMxD,MAFN,CAAhB;AAGA,YAAMyD,QAAQ,GAAGJ,OAAO,CAACK,IAAR,GAAeC,UAAf,CAA0B,IAA1B,CAAjB;AAEA,UAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACA,UAAIC,CAAC,GAAGV,SAAR;AAEA,UAAIW,KAAK,GAAGC,WAAW,CAAE,MAAM;AAC3B,YAAIC,UAAU,GAAGJ,IAAI,CAACD,GAAL,KAAaA,GAA9B;;AACA,YAAGE,CAAC,KAAKV,SAAT,EAAoB;AAChBQ,UAAAA,GAAG,CAACM,UAAJ,CAAeN,GAAG,CAACO,UAAJ,KAAmBf,SAAS,GAAG,EAA9C;AACH;;AAED,YAAIgB,IAAI,GAAG,IAAIP,IAAJ,CAASD,GAAG,CAACS,OAAJ,KAAgB,KAAKJ,UAA9B,CAAX;AACAR,QAAAA,QAAQ,CAACa,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBvE,KAAzB,EAAgCC,MAAhC;AACAyD,QAAAA,QAAQ,CAACc,IAAT,GAAgB,sBAAhB;AACAd,QAAAA,QAAQ,CAACe,SAAT,GAAqB,MAArB;AACAf,QAAAA,QAAQ,CAACgB,SAAT,GAAqB,QAArB;AACAhB,QAAAA,QAAQ,CAACiB,QAAT,CAAkB/E,YAAY,CAACyE,IAAD,CAA9B,EAAsCrE,KAAK,GAAG,CAA9C,EAAiD,EAAjD;;AAEA,YAAG+D,CAAC,IAAIb,GAAR,EAAa;AACT0B,UAAAA,aAAa,CAACZ,KAAD,CAAb;AACA,eAAKpD,QAAL,CAAc;AAACiE,YAAAA,SAAS,EAAE;AAAZ,WAAd;AACA,gBAAMC,KAAK,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,MAAhC,EAAwC,CAAxC,CAAd;AACAF,UAAAA,KAAK,CAACG,SAAN,GAAkB,EAAlB;AACA;AACH;;AACDvD,QAAAA,IAAI,CAACwD,OAAL,CAAcjE,GAAG,IAAI;AACjB,gBAAM;AAAEkE,YAAAA,IAAF;AAAQhC,YAAAA;AAAR,cAAsBlC,GAA5B;AACA,eAAKmE,OAAL,CAAaD,IAAb,EAAmBhC,SAAS,CAACY,CAAD,CAA5B,EAAiCL,QAAjC;AACH,SAHD;AAKAK,QAAAA,CAAC,IAAI,EAAL;AACH,OA1BsB,EA0BpB,IA1BoB,CAAvB;AA2BH,KAvIc;;AAAA,SAyIfqB,OAzIe,GAyIL,CAACnE,GAAD,EAAMoE,GAAN,EAAW3B,QAAX,KAAwB;AAC9B,YAAM;AAAE4B,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAAgCF,GAAtC;AACA,UAAG,CAACC,YAAD,IAAiB,CAACC,WAArB,EAAmC;AACnC,YAAM;AAAEC,QAAAA;AAAF,UAAcvE,GAApB;AACA,YAAMwE,cAAc,GAAGD,OAAO,CAACE,KAAR,CAAc,MAAd,EAAsBC,IAAtB,CAA2B,EAA3B,CAAvB;AAEA,YAAMC,UAAU,GAAG7F,cAAc,GAC1B8F,KADY,CACN,GADM,EAEZC,SAFY,CAEF,CAAC9F,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAFE,EAGZ8F,SAHY,CAGF,EAHE,CAAnB;AAKA,YAAMC,EAAE,GAAGJ,UAAU,CAAC,CAACN,YAAD,EAAeC,WAAf,CAAD,CAArB;AACA7B,MAAAA,QAAQ,CAACe,SAAT,GAAqBhF,OAAO,CAACwG,YAAR,CAAqBvG,gBAArB,EAAuC+F,cAAvC,CAArB;AACA/B,MAAAA,QAAQ,CAACwC,SAAT;AACAxC,MAAAA,QAAQ,CAACyC,GAAT,CAAaH,EAAE,CAAC,CAAD,CAAf,EAAoBA,EAAE,CAAC,CAAD,CAAtB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,IAAEI,IAAI,CAACC,EAAxC;AACA3C,MAAAA,QAAQ,CAAC4C,IAAT;AACA5C,MAAAA,QAAQ,CAACc,IAAT,GAAgB,sBAAhB;AACAd,MAAAA,QAAQ,CAACgB,SAAT,GAAqB,QAArB;AACAhB,MAAAA,QAAQ,CAACiB,QAAT,CAAkBc,cAAlB,EAAkCO,EAAE,CAAC,CAAD,CAApC,EAAyCA,EAAE,CAAC,CAAD,CAAF,GAAM,EAA/C;AACH,KA5Jc;;AAEX,SAAKvF,KAAL,GAAa;AACXqC,MAAAA,iBAAiB,EAAE,KADR;AAEXjC,MAAAA,mBAAmB,EAAE,KAFV;AAGXH,MAAAA,OAAO,EAAE6F,SAHE;AAIXxF,MAAAA,QAAQ,EAAE;AAJC,KAAb;AAMA,SAAKwC,QAAL,GAAgBxE,KAAK,CAACyH,SAAN,EAAhB;AACD;;AAqJDC,EAAAA,MAAM,GAAG;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,KAAK9D,mBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,aAAD;AACE,MAAA,OAAO,EAAE,KAAKlC,KAAL,CAAWuC,OADtB;AAEE,MAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWqC,iBAFtB;AAGE,MAAA,iBAAiB,EAAE,KAAKX,WAH1B;AAIE,MAAA,YAAY,EAAE,KAAK1B,KAAL,CAAWM,QAAX,CAAoBqC,MAApB,KAA+B,CAJ/C;AAKE,MAAA,YAAY,EAAE,KAAKhD,YALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,eAWE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAE,KAAKmD,QADjB;AAEE,MAAA,OAAO,EAAE,KAAK9C,KAAL,CAAWI,mBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAXF,CADF;AAoBH;;AApLwB;;AAsL7B,eAAeX,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport SatSetting from './SatSetting';\nimport SatelliteList from './SatelliteList';\nimport { NEARBY_SATELLITE, STARLINK_CATEGORY, SAT_API_KEY, SATELLITE_POSITION_URL } from '../constant';\nimport Axios from 'axios';\nimport WorldMap from './WorldMap';\nimport * as d3Scale from 'd3-scale';\nimport { schemeCategory10  } from 'd3-scale-chromatic';\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\nimport { select as d3Select } from 'd3-selection';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\n\nconst width = 960;\nconst height = 600;\n\nclass Main extends Component {\n    constructor(){\n      super();\n      this.state = {\n        loadingSatellites: false,\n        loadingSatPositions: false,\n        setting: undefined,\n        selected: [],\n      }\n      this.refTrack = React.createRef();\n    }\n\n    trackOnClick = (duration) => {\n      const { observerLat, observerLong, observerAlt } = this.state.setting;\n      const endTime = duration * 60;\n      this.setState({ \n        loadingSatPositions: true,\n        duration: duration\n      });\n      const urls = this.state.selected.map( sat => {\n          const { satid } = sat;\n          const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerAlt}/${endTime}/&apiKey=${SAT_API_KEY}`;\n          return Axios.get(url);\n      });\n\n      Axios.all(urls)\n        .then(\n          Axios.spread((...args) => {\n              return args.map(item => item.data);\n          })\n        )\n        .then( res => {\n            this.setState({\n                satPositions: res,\n                loadingSatPositions: false,\n            });\n            this.track();\n        })\n        .catch( e => {\n            console.log('err in fetch satellite position -> ', e.message);\n        })\n\n    }\n\n    addOrRemove = (item, status) => {\n      let { selected: list } = this.state;\n      // let list = this.state.selected;\n      const found = list.some(entry => entry.satid === item.satid);\n\n      if(status && !found){\n          list.push(item)\n      }\n\n      if(!status && found){\n          list = list.filter( entry => {\n              return entry.satid !== item.satid;\n          });\n      }\n      \n      console.log(list);\n      this.setState({\n        selected: list\n      })\n    }\n\n    showNearbySatellite = (setting) => {\n      this.setState({\n        setting: setting,\n      })\n      this.fetchSatellite(setting);\n    }\n\n    fetchSatellite = (setting) => {\n      const {observerLat, observerLong, observerAlt, radius} = setting;\n      const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerAlt}/${radius}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      \n      this.setState({\n        loadingSatellites: true,\n      })\n      Axios.get(url)\n          .then(response => {\n              this.setState({\n                  satInfo: response.data,\n                  loadingSatellites: false,\n                  selected: [],\n              })\n          })\n          .catch(error => {\n              console.log('err in fetch satellite -> ', error);\n              this.setState({\n                loadingSatellites: false,\n              })\n          })\n    }\n\n    track = () => {\n      const data = this.state.satPositions;\n\n      const len = data[0].positions.length;\n      const startTime = this.state.duration;\n\n      const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n      const context2 = canvas2.node().getContext(\"2d\");\n\n      let now = new Date();\n      let i = startTime;\n\n      let timer = setInterval( () => {\n          let timePassed = Date.now() - now;\n          if(i === startTime) {\n              now.setSeconds(now.getSeconds() + startTime * 60)\n          }\n\n          let time = new Date(now.getTime() + 60 * timePassed);\n          context2.clearRect(0, 0, width, height);\n          context2.font = \"bold 14px sans-serif\";\n          context2.fillStyle = \"#333\";\n          context2.textAlign = \"center\";\n          context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n          if(i >= len) {\n              clearInterval(timer);\n              this.setState({isDrawing: false});\n              const oHint = document.getElementsByClassName('hint')[0];\n              oHint.innerHTML = ''\n              return;\n          }\n          data.forEach( sat => {\n              const { info, positions } = sat;\n              this.drawSat(info, positions[i], context2)\n          });\n\n          i += 60;\n      }, 1000)\n  }\n\n  drawSat = (sat, pos, context2) => {\n      const { satlongitude, satlatitude } = pos;\n      if(!satlongitude || !satlatitude ) return;\n      const { satname } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join('');\n\n      const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = d3Scale.scaleOrdinal(schemeCategory10)(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2*Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1]+14);\n  }\n\n    render() {\n        return (\n          <div className='main'>\n            <div className=\"left-side\">\n              <SatSetting onShow={this.showNearbySatellite} />\n              <SatelliteList \n                satInfo={this.state.satInfo} \n                loading={this.state.loadingSatellites} \n                onSelectionChange={this.addOrRemove}\n                disableTrack={this.state.selected.length === 0}\n                trackOnclick={this.trackOnClick}\n              />\n            </div>\n            <div className=\"right-side\">\n              <WorldMap \n                refTrack={this.refTrack}\n                loading={this.state.loadingSatPositions}\n              />\n            </div>\n          </div>\n        );\n    }\n}\nexport default Main;"]},"metadata":{},"sourceType":"module"}